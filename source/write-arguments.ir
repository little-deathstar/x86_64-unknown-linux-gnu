target triple = "x86_64-unknown-linux-gnu"

define void @system.exit(i32 %value) noreturn {
	%value.0 = sext i32 %value to i64
	call void asm inteldialect "mov rdi, $0", "{rax},~{rdi}"(i64 %value.0)
	call void asm inteldialect "mov rax, 60", "~{rax}"()
	call void asm sideeffect inteldialect "syscall", ""()
	unreachable
}

@system.output = constant i32 1

define i64 @system.write(i32 %file, i8 * %value, i64 %size) {
	%file.0 = sext i32 %file to i64
	call void asm inteldialect "mov rdx, $0", "r,~{rdx}"(i64 %size)
	call void asm inteldialect "mov rsi, $0", "r,~{rsi}"(i8* %value)
	call void asm inteldialect "mov rdi, $0", "r,~{rdi}"(i64 %file.0)
	call void asm inteldialect "mov rax, 1", "~{rax}"()
	%system.write = call i64 asm sideeffect inteldialect "syscall", "={rax},~{rcx}"()
	ret i64 %system.write
}

%system.arguments = type { i32, [0 x i8 *] }

@space = private constant i8 u0x20
@line = private constant i8 u0x0A

define external void @system(%system.arguments * %arguments) noreturn {
	branch:
		%file = load i32, i32 * @system.output
		%arguments.count.address = getelementptr %system.arguments, %system.arguments * %arguments, i64 0, i32 0
		%arguments.count = load i32, i32 * %arguments.count.address
		%arguments.value = getelementptr %system.arguments, %system.arguments * %arguments, i64 0, i32 1
		%branch.value = icmp sgt i32 %arguments.count, 1
		br i1 %branch.value, label %argument.join, label %exit
	argument.join:
		%arguments.index = phi i32 [1, %branch], [%arguments.loop.value, %argument.loop]
		br label %argument.branch
	argument.branch:
		%argument.branch.value = icmp slt i32 %arguments.index, %arguments.count
		br i1 %argument.branch.value, label %argument.enter, label %write.line
	argument.enter:
		%argument.address = getelementptr i8 *, i8 * %arguments.value, i32 %arguments.index
		%argument = load i8 *, i8 * %argument.address
		br label %argument.size.join
	argument.size.join:
		%argument.size = phi i64 [0, %argument.enter], [%argument.size.loop.value, %argument.size.loop]
		br label %argument.character.enter
	argument.character.enter:
		%argument.character.address = getelementptr i8, i8 * %argument, i64 %argument.size
		%argument.character = load i8, i8 * %argument.character.address
		br label %argument.size.branch
	argument.size.branch:
		%argument.size.branch.value = icmp eq i8 %argument.character, 0
		br i1 %argument.size.branch.value, label %write.branch, label %argument.size.loop
	argument.size.loop:
		%argument.size.loop.value = add i64 %argument.size, 1
		br label %argument.size.join
	write.branch:
		%write.branch.value = icmp eq i32 %arguments.index, 1
		br i1 %write.branch.value, label %write.argument, label %write.space
	write.space:
		call i64 @system.write(i32 %file, i8 * @space, i64 1) ; ignore potential error
		br label %write.argument
	write.argument:
		call i64 @system.write(i32 %file, i8 * %argument, i64 %argument.size) ; ignore potential error
		br label %argument.loop
	argument.loop:
		%arguments.loop.value = add i32 %arguments.index, 1
		br label %argument.join
	write.line:
		call i64 @system.write(i32 %file, i8 * @line, i64 1) ; ignore potential error
		br label %exit
	exit:
		call void @system.exit(i32 0) noreturn
		unreachable
}